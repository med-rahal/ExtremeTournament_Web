<?php

namespace App\Controller;

use App\Entity\User;
use App\Form\UpdateUserType;
use App\Form\UserType;
use App\Repository\TournoiRepository;
use App\Repository\UserRepository;
use CMEN\GoogleChartsBundle\GoogleCharts\Charts\PieChart;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;

class DashboardController extends AbstractController
{
    /**
     * @Route("/admin", name="app_admin")
     */
    public function index(): Response
    {
        $user = $this->get('security.token_storage')->getToken()->getUser();
        $img= $user->getImage();
        return $this->render('dashboard/index.html.twig',['img'=>$img]);
    }






    /**
     * @Route("/admin/user", name="afficheuser")
     */
    public function affiche(): Response
    {

        $rep = $this->getDoctrine()->getRepository(User::class);
        $users=$rep->findAll();
        return $this->render('dashboard/afficheuser.html.twig',['users'=>$users]);

    }

    /**
     * @param $id
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     * @Route("/admin/user/delete/{id}",name="deleteuser")
     */

    public function delete($id){
        $user =$this->getDoctrine()->getRepository(User::class)->find($id);
        $em = $this->getDoctrine()->getManager();
        $em->remove($user);
        $em->flush();
        return $this->redirectToRoute('afficheuser');


    }



    /**
     * @param UserRepository $repository
     * @param $id
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|Response
     * @Route("/admin/user/update/{id}",name="updateuser")
     */
    public function update(UserRepository $repository,$id,Request $request){
        $user=$repository->find($id);
        $form = $this->createForm(UpdateUserType::class,$user);
        $form->add('update',SubmitType::class);
        $form->handleRequest($request);
        $file = $form->get('image')->getData();
        if($form->isSubmitted() &&$form->isValid()){
             $em = $this->getDoctrine()->getManager();
             $em->flush();
            return $this->redirectToRoute('afficheuser');

        }

        return $this->render('dashboard/modifyuser.html.twig',['form'=>$form->createView(),'image'=>$file]);
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @param $id
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     * @Route("/admin/user/block/{id}",name="blockuser")
     */
    public function block($id){
        $user =$this->getDoctrine()->getRepository(User::class)->find($id);
        $em = $this->getDoctrine()->getManager();
        $user->setBanned(true);
        $em->persist($user);
        $em->flush();
        return $this->redirectToRoute('afficheuser');


    }

    /**
     * @param $id
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     * @Route("/admin/user/unblock/{id}",name="unblockuser")
     */
    public function unblock($id){
        $user =$this->getDoctrine()->getRepository(User::class)->find($id);
        $em = $this->getDoctrine()->getManager();
        $user->setBanned(false);
        $em->persist($user);
        $em->flush();
        return $this->redirectToRoute('afficheuser');

    }


///// ------------------ PIECHART
    /**
     * @Route("/admin", name="app_admin")
     *  @return \Symfony\Component\HttpFoundation\Response
     */
    public function Stats(TournoiRepository $T):Response
    {
        $data = $T->findAll();
        $dest = array();
        foreach ($data as $x) {
            //$dest[] = [$x->getDestination()] ;
            array_push($dest, $x->getEmplacementT());
        }

        $pieChart = new PieChart();
        $array_dest_occ = array_count_values($dest);
        $final = [
            ['Name ', 'Location']

        ];
        foreach ($array_dest_occ as $x => $x_value) {
            $final[] = [$x, (int)$x_value];
        }


        $pieChart->getData()->setArrayToDataTable( $final);

        $pieChart->getOptions()->setTitle('Tournois en Fonction des Emplacement');
        $pieChart->getOptions()->setHeight(360);
        $pieChart->getOptions()->setWidth(510);
        $pieChart->getOptions()->getTitleTextStyle()->setColor('#07600');
        $pieChart->getOptions()->getTitleTextStyle()->setFontSize(15);

        $data = $T->findAll();
        $dest = array();
        foreach ($data as $x) {
            //$dest[] = [$x->getDestination()] ;
            array_push($dest, $x->getEmplacementT());
        }

        $GeoChart = new PieChart();
        $array_dest_occ = array_count_values($dest);
        $final = [
            ['Name ', 'Location']

        ];
        foreach ($array_dest_occ as $x => $x_value) {
            $final[] = [$x, (int)$x_value];
        }


        $GeoChart->getData()->setArrayToDataTable( $final);

        $GeoChart->getOptions()->setHeight(360);
        $GeoChart->getOptions()->setWidth(510);


        //dump($data); die();

        return $this->render('dashboard/index.html.twig',  [
                'controller_name' => 'GameController','piechart' => $pieChart ,'Geochart' => $GeoChart]
        );

    }








}
